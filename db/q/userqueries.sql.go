// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: userqueries.sql

package q

import (
	"context"
)

const insertUser = `-- name: InsertUser :one
Insert into users (email, hashed_password) values ($1, $2) returning id
`

type InsertUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.HashedPassword)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectPasswordHashByUserEmail = `-- name: SelectPasswordHashByUserEmail :one
SELECT id, hashed_password FROM users WHERE email = $1
`

type SelectPasswordHashByUserEmailRow struct {
	ID             int32
	HashedPassword string
}

func (q *Queries) SelectPasswordHashByUserEmail(ctx context.Context, email string) (SelectPasswordHashByUserEmailRow, error) {
	row := q.db.QueryRow(ctx, selectPasswordHashByUserEmail, email)
	var i SelectPasswordHashByUserEmailRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return i, err
}
